use axum::{
    extract::{
        ws::{Message, WebSocket, WebSocketUpgrade},
        State,
    },
    response::IntoResponse,
};
use bytes::{Bytes, BytesMut};
use dashmap::DashMap;
use futures::{sink::SinkExt, stream::StreamExt};
use portable_pty::{native_pty_system, CommandBuilder, PtySize};
use std::{io::Read, sync::Arc};
use tokio::sync::mpsc;
use tracing::{error, info};
use uuid::Uuid;

use crate::{
    audio_optimized::AUDIO_MANAGER,
    terminal_buffer::{TerminalRingBuffer, Utf8StreamDecoder},
    tmux,
    types::*,
    AppState,
};

// Pre-serialized messages for zero allocation
lazy_static::lazy_static! {
    static ref MSG_PONG: Arc<String> = Arc::new(r#"{"type":"pong"}"#.to_string());
    static ref MSG_DISCONNECTED: Arc<String> = Arc::new(r#"{"type":"disconnected"}"#.to_string());
}

pub struct OptimizedWsHandler {
    sessions: Arc<DashMap<String, SessionState>>,
}

struct SessionState {
    terminal_buffer: Arc<tokio::sync::Mutex<TerminalRingBuffer>>,
    writer: Arc<tokio::sync::Mutex<Box<dyn std::io::Write + Send>>>,
    _reader_task: tokio::task::JoinHandle<()>,
}

impl OptimizedWsHandler {
    pub fn new() -> Self {
        Self {
            sessions: Arc::new(DashMap::new()),
        }
    }

    pub async fn handle(
        &self,
        ws: WebSocketUpgrade,
        State(state): State<Arc<AppState>>,
    ) -> impl IntoResponse {
        ws.on_upgrade(|socket| self.handle_socket(socket, state))
    }

    async fn handle_socket(&self, socket: WebSocket, _state: Arc<AppState>) {
        let client_id = Uuid::new_v4().to_string();
        info!("WebSocket connected: {}", client_id);

        let (mut sender, mut receiver) = socket.split();
        let (tx, mut rx) = mpsc::unbounded_channel::<WsMessage>();

        // Spawn optimized sender task
        let sender_task = tokio::spawn(async move {
            while let Some(msg) = rx.recv().await {
                match msg {
                    WsMessage::Text(data) => {
                        let _ = sender.send(Message::Text(data)).await;
                    }
                    WsMessage::Binary(data) => {
                        let _ = sender.send(Message::Binary(data.to_vec())).await;
                    }
                }
            }
        });

        // Handle messages with zero-copy
        while let Some(Ok(msg)) = receiver.next().await {
            match msg {
                Message::Text(text) => {
                    if let Err(e) = self.handle_text_message(&text, &client_id, &tx).await {
                        error!("Message handling error: {}", e);
                    }
                }
                Message::Binary(data) => {
                    // Handle binary input for terminal
                    if let Some(session) = self.sessions.iter().find(|s| s.key().contains(&client_id)).map(|s| s.value().clone()) {
                        let mut writer = session.writer.lock().await;
                        let _ = writer.write_all(&data);
                    }
                }
                Message::Close(_) => break,
                _ => {}
            }
        }

        // Cleanup
        sender_task.abort();
        AUDIO_MANAGER.remove_client(&client_id).await.ok();
        self.sessions.retain(|k, _| !k.contains(&client_id));
        info!("WebSocket disconnected: {}", client_id);
    }

    async fn handle_text_message(
        &self,
        text: &str,
        client_id: &str,
        tx: &mpsc::UnboundedSender<WsMessage>,
    ) -> Result<(), anyhow::Error> {
        // Fast path for ping
        if text == r#"{"type":"ping"}"# {
            tx.send(WsMessage::Text(MSG_PONG.to_string()))?;
            return Ok(());
        }

        // Parse message
        let msg: WebSocketMessage = serde_json::from_str(text)?;

        match msg {
            WebSocketMessage::ListSessions => {
                let sessions = tmux::list_sessions().await.unwrap_or_default();
                let response = ServerMessage::SessionsList { sessions };
                self.send_json(tx, &response)?;
            }

            WebSocketMessage::AttachSession { session_name, cols, rows } => {
                self.attach_session(client_id, &session_name, cols, rows, tx).await?;
            }

            WebSocketMessage::Input { data } => {
                let session_key = format!("{}-{}", client_id, "session");
                if let Some(session) = self.sessions.get(&session_key) {
                    let mut writer = session.writer.lock().await;
                    writer.write_all(data.as_bytes())?;
                    writer.flush()?;
                }
            }

            WebSocketMessage::AudioControl { action } => {
                match action {
                    AudioAction::Start => {
                        AUDIO_MANAGER.add_client(client_id.to_string(), tx.clone()).await?;
                    }
                    AudioAction::Stop => {
                        AUDIO_MANAGER.remove_client(client_id).await?;
                    }
                }
            }

            _ => {}
        }

        Ok(())
    }

    async fn attach_session(
        &self,
        client_id: &str,
        session_name: &str,
        cols: u16,
        rows: u16,
        tx: &mpsc::UnboundedSender<WsMessage>,
    ) -> Result<(), anyhow::Error> {
        // Create PTY
        let pty_system = native_pty_system();
        let pair = pty_system.openpty(PtySize {
            rows,
            cols,
            pixel_width: 0,
            pixel_height: 0,
        })?;

        let mut cmd = CommandBuilder::new("tmux");
        cmd.args(&["attach-session", "-t", session_name]);
        cmd.env("TERM", "xterm-256color");

        let reader = pair.master.try_clone_reader()?;
        let writer = Arc::new(tokio::sync::Mutex::new(pair.master.take_writer()?));
        let _child = pair.slave.spawn_command(cmd)?;

        // Create ring buffer
        let terminal_buffer = Arc::new(tokio::sync::Mutex::new(TerminalRingBuffer::new()));
        let tx_clone = tx.clone();

        // Zero-copy reader task
        let reader_task = tokio::task::spawn_blocking(move || {
            let mut reader = reader;
            let mut buffer = vec![0u8; 65536];
            let mut utf8_decoder = Utf8StreamDecoder::new();
            let mut output_buffer = BytesMut::with_capacity(8192);

            loop {
                match reader.read(&mut buffer) {
                    Ok(0) => break,
                    Ok(n) => {
                        let (text, _) = utf8_decoder.decode_chunk(&buffer[..n]);
                        
                        if !text.is_empty() {
                            output_buffer.extend_from_slice(text.as_bytes());
                            
                            // Send in chunks for better performance
                            if output_buffer.len() > 4096 || output_buffer.contains(&b'\n') {
                                let data = output_buffer.split().freeze();
                                let json = format!(
                                    r#"{{"type":"output","data":{}}}"#,
                                    serde_json::to_string(std::str::from_utf8(&data).unwrap_or("")).unwrap()
                                );
                                let _ = tx_clone.send(WsMessage::Text(json));
                            }
                        }
                    }
                    Err(_) => break,
                }
            }

            let _ = tx_clone.send(WsMessage::Text(MSG_DISCONNECTED.to_string()));
        });

        // Store session
        let session_key = format!("{}-session", client_id);
        self.sessions.insert(
            session_key,
            SessionState {
                terminal_buffer,
                writer,
                _reader_task: reader_task,
            },
        );

        // Send attached message
        let attached = ServerMessage::Attached {
            session_name: session_name.to_string(),
        };
        self.send_json(tx, &attached)?;

        Ok(())
    }

    fn send_json<T: serde::Serialize>(
        &self,
        tx: &mpsc::UnboundedSender<WsMessage>,
        msg: &T,
    ) -> Result<(), anyhow::Error> {
        let json = serde_json::to_string(msg)?;
        tx.send(WsMessage::Text(json))?;
        Ok(())
    }
}

#[derive(Clone)]
enum WsMessage {
    Text(String),
    Binary(Bytes),
}