use anyhow::Result;
use bytes::Bytes;
use dashmap::DashMap;
use std::sync::Arc;
use tokio::{
    io::AsyncReadExt,
    process::{Child, Command},
    sync::mpsc,
};
use tracing::{error, info};

use crate::websocket::BroadcastMessage;

type ClientId = String;
type AudioClient = mpsc::UnboundedSender<BroadcastMessage>;

// Lock-free client management
pub struct AudioManager {
    clients: Arc<DashMap<ClientId, AudioClient>>,
    ffmpeg_handle: Arc<tokio::sync::Mutex<Option<AudioHandle>>>,
}

struct AudioHandle {
    child: Child,
    reader_task: tokio::task::JoinHandle<()>,
}

impl AudioManager {
    pub fn new() -> Self {
        Self {
            clients: Arc::new(DashMap::new()),
            ffmpeg_handle: Arc::new(tokio::sync::Mutex::new(None)),
        }
    }

    pub async fn add_client(&self, client_id: String, tx: AudioClient) -> Result<()> {
        self.clients.insert(client_id.clone(), tx.clone());
        info!("Audio client added: {}. Total: {}", client_id, self.clients.len());

        // Start streaming if first client
        if self.clients.len() == 1 {
            self.start_streaming().await?;
        }

        // Send status to new client
        let status = crate::types::ServerMessage::AudioStatus {
            streaming: true,
            error: None,
        };
        if let Ok(json) = serde_json::to_string(&status) {
            let _ = tx.send(BroadcastMessage::Text(Arc::new(json)));
        }

        Ok(())
    }

    pub async fn remove_client(&self, client_id: &str) -> Result<()> {
        self.clients.remove(client_id);
        info!("Audio client removed: {}. Remaining: {}", client_id, self.clients.len());

        // Stop streaming if no clients
        if self.clients.is_empty() {
            self.stop_streaming().await?;
        }

        Ok(())
    }

    async fn start_streaming(&self) -> Result<()> {
        let mut handle_guard = self.ffmpeg_handle.lock().await;
        if handle_guard.is_some() {
            return Ok(()); // Already streaming
        }

        info!("Starting optimized audio streaming...");

        // Platform-specific audio source
        let (input_source, input_args) = if cfg!(target_os = "linux") {
            // Auto-detect PulseAudio monitor
            match get_default_monitor_source().await {
                Ok(source) => (source, vec!["-f", "pulse", "-i"]),
                Err(_) => ("default".to_string(), vec!["-f", "pulse", "-i"]),
            }
        } else if cfg!(target_os = "macos") {
            (":0".to_string(), vec!["-f", "avfoundation", "-i"])
        } else {
            error!("Unsupported platform");
            return Err(anyhow::anyhow!("Unsupported platform"));
        };

        // Spawn ffmpeg with optimal settings
        let mut child = Command::new("ffmpeg")
            .args(&input_args)
            .arg(&input_source)
            .args(&[
                "-acodec", "libopus",
                "-b:a", "128k",
                "-ar", "48000",
                "-ac", "2",
                "-f", "webm",
                "-cluster_size_limit", "2M",
                "-cluster_time_limit", "5100",
                "-"
            ])
            .stdout(std::process::Stdio::piped())
            .stderr(std::process::Stdio::piped())
            .kill_on_drop(true)
            .spawn()?;

        let mut stdout = child.stdout.take().unwrap();
        let clients = self.clients.clone();

        // Zero-copy reader with larger buffer
        let reader_task = tokio::spawn(async move {
            let mut buffer = vec![0u8; 32768]; // 32KB chunks
            
            loop {
                match stdout.read(&mut buffer).await {
                    Ok(0) => break, // EOF
                    Ok(n) => {
                        // Zero-copy: create Bytes from existing buffer
                        let chunk = Bytes::copy_from_slice(&buffer[..n]);
                        
                        // Broadcast as binary frame directly
                        let msg = BroadcastMessage::Binary(chunk);
                        
                        // Lock-free iteration over clients
                        for entry in clients.iter() {
                            let _ = entry.value().send(msg.clone());
                        }
                    }
                    Err(e) => {
                        error!("FFmpeg read error: {}", e);
                        break;
                    }
                }
            }

            info!("Audio streaming ended");
        });

        *handle_guard = Some(AudioHandle { child, reader_task });
        Ok(())
    }

    async fn stop_streaming(&self) -> Result<()> {
        let mut handle_guard = self.ffmpeg_handle.lock().await;
        if let Some(mut handle) = handle_guard.take() {
            info!("Stopping audio streaming...");
            let _ = handle.child.kill().await;
            handle.reader_task.abort();
        }

        // Notify all clients
        let status = crate::types::ServerMessage::AudioStatus {
            streaming: false,
            error: None,
        };
        if let Ok(json) = serde_json::to_string(&status) {
            let msg = BroadcastMessage::Text(Arc::new(json));
            for entry in self.clients.iter() {
                let _ = entry.value().send(msg.clone());
            }
        }

        Ok(())
    }
}

async fn get_default_monitor_source() -> Result<String> {
    let output = Command::new("pactl")
        .args(&["get-default-sink"])
        .output()
        .await?;
    
    if !output.status.success() {
        return Err(anyhow::anyhow!("Failed to get default sink"));
    }
    
    let sink = String::from_utf8_lossy(&output.stdout).trim().to_string();
    Ok(format!("{}.monitor", sink))
}

// Global singleton for zero-allocation access
lazy_static::lazy_static! {
    pub static ref AUDIO_MANAGER: AudioManager = AudioManager::new();
}